{"version":3,"sources":["components/Fetcher.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Fetcher","url","setError","a","Axios","get","response","loadData","handleClick","setData","city","country","setCity","setCounter","undefined","data","getDegree","temp","temperatue","Math","floor","ShowWeatherContent","dataApi","main","className","date","Date","day","getDate","month","getMonth","id","name","weather","description","temp_min","clouds","all","wind","speed","humidity","showComponents","wrapper","document","getElementById","container","info","gsap","set","children","autoAlpha","transformOrigin","tl","timeline","defaults","ease","fromTo","x","scaleX","duration","y","stagger","Weather","props","useEffect","App","useRef","useState","error","setCountry","getData","Fragment","type","placeholder","value","onChange","e","target","onClick","ref","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"qQAEe,SAASA,EAAQC,EAAIC,GAuBpC,OArBc,uCAAG,4BAAAC,EAAA,+EAKcC,IAAMC,IAAIJ,GALxB,cAKHK,EALG,yBAOFA,GAPE,uCAUXJ,GAAS,GAVE,4EAAH,oDAoBAK,G,WCpBDC,EAAW,uCAAG,WAAMC,EAAQC,EAAKC,EAAQT,EAASU,EAAQC,GAA5C,iBAAAV,EAAA,yDACX,mCAENF,EAHiB,4DAG0CS,EAH1C,YAGkDC,EAHlD,kBACX,oCAKH,KAARD,GAAyB,KAAZC,EANS,gBAOvBT,GAAS,GAPc,uCAWDF,EAAQC,EAAIC,GAXX,YAaVY,KAFJC,EAXc,QAenBb,GAAS,IAGTU,EAAQ,IACRC,EAAW,IACXX,GAAS,GACTO,EAAQM,EAAKA,OArBM,4CAAH,gEA0ClBC,EAAY,SAACC,GAEjB,IAAMC,EAAcD,EAIpB,OAHgBE,KAAKC,MAAMF,EAAY,SAKnCG,EAAsB,SAACN,GAE3B,IAAMO,OAAsBR,IAAZC,EAAKQ,KAErB,OACE,oCAKI,yBAAKC,UAAU,yBACb,wBAAIA,UAAU,yBA9BR,WAChB,IAEQC,EAAO,IAAIC,KACbC,EAAMF,EAAKG,UACXC,EAAQJ,EAAKK,WAGnB,MAAM,GAAN,OAAUH,EAAV,YAPe,CAAC,eAAU,OAAO,SAAS,gBAAW,MAAM,WAAW,SAAS,gBAAW,gBAAW,mBAAc,WAAW,iBAOtGE,IAsByBD,IACvC,wBAAIJ,UAAU,yBAAyBO,GAAG,SAAShB,EAAKiB,KAAxD,IAA8D,0BAAMR,UAAU,mDAAyD,uBAAGA,UAAU,sCAAuCF,EAAQ,MAAMP,EAAKkB,QAAQ,GAAGC,eAE/N,yBAAKV,UAAU,2BAA2BO,GAAG,WAC3C,yBAAKP,UAAU,gCAAgCO,GAAG,QACjD,uBAAGP,UAAU,sCAAsCF,EAAQ,MAAMN,EAAUD,EAAKQ,KAAKN,MAArF,QACA,0BAAMO,UAAU,sCAAhB,cAAiEF,EAAQ,MAAMN,EAAUD,EAAKQ,KAAKY,UAAnG,SAED,yBAAKX,UAAU,gCAAgCO,GAAG,QAChD,yBAAKP,UAAU,yCACb,uBAAGA,UAAU,uCAAsC,0BAAMA,UAAU,oDAAnE,UACA,0BAAMA,UAAU,uCAAuCF,EAAQ,MAAMP,EAAKqB,OAAOC,IAAjF,OAEF,yBAAKb,UAAU,yCACf,uBAAGA,UAAU,uCAAsC,0BAAMA,UAAU,sDAAnE,QACE,0BAAMA,UAAU,uCAAhB,QAEF,yBAAKA,UAAU,yCACf,uBAAGA,UAAU,uCAAsC,0BAAMA,UAAU,mDAAnE,QACN,0BAAMA,UAAU,uCAAuCF,EAAQ,MAAMP,EAAKuB,KAAKC,MAA/E,UAEM,yBAAKf,UAAU,yCACf,uBAAGA,UAAU,uCAAsC,0BAAMA,UAAU,sDAAnE,YACE,0BAAMA,UAAU,uCAAuCF,EAAQ,MAAMP,EAAKQ,KAAKiB,SAA/E,UASGC,EAAiB,SAACC,GAE/B,IAAMb,EAAQc,SAASC,eAAe,SAC9B3B,EAAO0B,SAASC,eAAe,QAC/BC,EAAYF,SAASC,eAAe,WACpCE,EAAOH,SAASC,eAAe,QAErCG,IAAKC,IAAI,CAAC/B,EAAK4B,EAAUC,EAAKG,SAASpB,GAAO,CAACqB,UAAU,IACzDH,IAAKC,IAAI/B,EAAK,CAACkC,gBAAgB,YAC/BJ,IAAKC,IAAInB,EAAM,CAACsB,gBAAgB,aAChC,IAAMC,EAAKL,IAAKM,SAAS,CAACC,SAAS,CAACC,KAAK,kBAEzCH,EAAGI,OAAO3B,EAAM,CAAC4B,EAAE,OAAOC,OAAO,IAAK,CAACC,SAAS,GAAIF,EAAE,IAAIC,OAAO,EAAER,UAAU,IAC7EE,EAAGI,OAAOX,EAAU,CAACY,EAAE,UAAU,CAACE,SAAS,GAAIF,EAAE,IAAIP,UAAU,IAC/DE,EAAGI,OAAOvC,EAAK,CAACyC,OAAO,IAAK,CAACC,SAAS,GAAGD,OAAO,EAAER,UAAU,IAC5DE,EAAGI,OAAOV,EAAKG,SAAS,CAACW,GAAG,IAAK,CAACD,SAAS,GAAGC,EAAE,EAAEV,UAAU,EAAEW,QAAQ,MAuBvDC,EArBH,SAACC,GAWf,OATEC,qBAAU,WAEVvB,EAAesB,EAAMrB,WAInB,IAIE,oCAGGrB,EAAmB0C,EAAMhD,QC/DnBkD,G,YAzDL,WACR,IAAMvB,EAAUwB,iBAAO,MADV,EAGUC,mBAAS,IAHnB,mBAGNpD,EAHM,KAGDN,EAHC,OAIY0D,oBAAS,GAJrB,mBAINC,EAJM,KAIAlE,EAJA,OAKUiE,mBAAS,IALnB,mBAKNzD,EALM,KAKDE,EALC,OAMgBuD,mBAAS,IANzB,mBAMNxD,EANM,KAME0D,EANF,KAsBb,OAdAL,qBAAU,WACN,IAEI/D,EAAG,4EAFO,oCADF,4CAId,4BAAAE,EAAA,sEACqBH,EAAQC,EAAIC,GADjC,OACQa,EADR,OAEEN,EAAQM,EAAKA,MAFf,4CAJc,0DAQduD,KAEC,IAKD,kBAAC,IAAMC,SAAP,KACI,yBAAK/C,UAAU,OACf,yBAAKA,UAAU,iBACf,wBAAIA,UAAU,uBAAd,eACA,yBAAKA,UAAU,gBAEb,2BAAOgD,KAAK,OAAOxC,KAAK,OAAOR,UAAW4C,EAAM,6CAA6C,oBAC7FK,YAAY,iBACZC,MAAOhE,EACPiE,SAAU,SAACC,GAAD,OAAKhE,EAAQgE,EAAEC,OAAOH,UAG9B,2BAAOF,KAAK,OAAOxC,KAAK,UAAUR,UAAW4C,EAAM,6CAA6C,oBAClGK,YAAY,oBACZC,MAAO/D,EACPgE,SAAU,SAACC,GAAD,OAAKP,EAAWO,EAAEC,OAAOH,UAElC,uBAAGlD,UAAY4C,EAA+B,uDAAzB,0BAArB,0BACH,4BAAQU,QAAS,WACftE,EAAYC,EAAQC,EAAKC,EAAQT,EAASU,EAAQyD,GAChD5B,KACCjB,UAAW4C,EAAM,2CAA2C,oBAHjE,YAMA,yBAAK5C,UAAU,kBAAkBuD,IAAKrC,GACtC,kBAAC,EAAD,CAAS3B,KAAMA,EAAM2B,QAASA,KAE5B,yBAAKlB,UAAU,kBC/CLwD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS3C,SAASC,eAAe,SD6H3C,kBAAmB2C,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzB,GACL0B,QAAQ1B,MAAMA,EAAM2B,c","file":"static/js/main.2ab2c3d8.chunk.js","sourcesContent":["import Axios from 'axios'\r\n\r\nexport default function Fetcher(url,setError){\r\n    \r\nconst loadData = async ()=>{\r\n     \r\n    try{\r\n        \r\n       \r\n        const response = await Axios.get(url)\r\n\r\n        return response\r\n    }\r\n   catch(error){\r\n      setError(true)\r\n       return\r\n   }\r\n\r\n\r\n\r\n         \r\n         \r\n}\r\n\r\nconst data =  loadData();\r\nreturn data\r\n\r\n   }","import React,{useEffect} from 'react';\r\nimport Fetcher from \"./Fetcher\"\r\nimport gsap from \"gsap\"\r\n\r\nexport const handleClick = async(setData,city,country,setError,setCity,setCounter) =>{\r\n  const APIKEY =\"3685edcdeb2b60f9ec66ee97605d3489\"\r\n\r\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&APPID=${APIKEY}`;\r\n\r\n    \r\n  if(city ===\"\"|| country === \"\"){\r\n    setError(true)\r\n  }\r\n  else{\r\n  \r\n       const data = await Fetcher(url,setError);\r\n      \r\n       if(data===undefined){\r\n        \r\n        setError(true)\r\n       }\r\n       else{\r\n        setCity(\"\");\r\n        setCounter(\"\")\r\n        setError(false)\r\n        setData(data.data)\r\n       }\r\n\r\n    \r\n\r\n\r\n  }\r\n    }\r\n\r\n\r\nconst getDate = ()=>{\r\nconst months = [\"styczeń\",\"luty\",\"marzec\",\"kwiecień\",\"maj\",\"czerwiec\",\"lipiec\",\"sierpień\",\"wrzesień\",\"październik\",\"listopad\",\"grudzień\"]\r\n\r\n  const date = new Date();\r\nconst day = date.getDate();\r\nconst month = date.getMonth();\r\n\r\n\r\nreturn `${day} ${months[month]}`\r\n}\r\n\r\nconst getDegree = (temp)=>{\r\n  \r\n  const temperatue =  temp;\r\n  const celcius = Math.floor(temperatue -273.15);\r\n\r\n  \r\n  return celcius\r\n}\r\nconst ShowWeatherContent =  (data)=>{\r\n  \r\n  const dataApi = data.main===undefined\r\n\r\n  return(\r\n    <>\r\n    \r\n      \r\n     \r\n       \r\n        <div className=\"weather-content__text\">\r\n          <h5 className=\"weather-content__date\">{getDate()}</h5>\r\n          <h1 className=\"weather-content__month\" id=\"month\">{data.name} <span className=\"fas fa-arrow-right weather-content__month-icon\" ></span><p className=\"weather-content__month-description\" >{dataApi?\"...\":data.weather[0].description}</p></h1>\r\n  </  div>\r\n    <div className=\"weather-content__details\" id=\"wrapper\">\r\n      <div className=\"weather-content__details-main\" id=\"temp\">\r\n       <p className=\"weather-content__details-main_temp\">{dataApi?\"...\":getDegree(data.main.temp)}&deg;</p>\r\n       <span className=\"weather-content__details-main-feel\">feels like {dataApi?\"...\":getDegree(data.main.temp_min)}&deg;</span>\r\n        </div>\r\n      <div className=\"weather-content__details-info\" id=\"info\">\r\n        <div className=\"weather-content__details-info_element\">\r\n          <p className=\"weather-content__details-info_state\"><span className=\"wi wi-cloudy weather-content__details-info_icon\"></span>Cloudy</p>\r\n          <span className=\"weather-content__details-info_value\">{dataApi?\"...\":data.clouds.all} %</span>\r\n        </div>\r\n        <div className=\"weather-content__details-info_element\">\r\n        <p className=\"weather-content__details-info_state\"><span className=\"wi wi-raindrop weather-content__details-info_icon\"></span>Rain</p>\r\n          <span className=\"weather-content__details-info_value\">40%</span>\r\n        </div>\r\n        <div className=\"weather-content__details-info_element\">\r\n        <p className=\"weather-content__details-info_state\"><span className=\"wi wi-windy weather-content__details-info_icon\"></span>Wind</p>\r\n  <span className=\"weather-content__details-info_value\">{dataApi?\"...\":data.wind.speed} km/h</span>\r\n        </div>\r\n        <div className=\"weather-content__details-info_element\">\r\n        <p className=\"weather-content__details-info_state\"><span className=\"wi wi-humidity weather-content__details-info_icon\"></span>Humidity</p>\r\n          <span className=\"weather-content__details-info_value\">{dataApi?\"...\":data.main.humidity}%</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nexport const showComponents = (wrapper)=>{\r\n  \r\nconst month = document.getElementById(\"month\");\r\n  const temp = document.getElementById(\"temp\");\r\n  const container = document.getElementById(\"wrapper\");\r\n  const info = document.getElementById(\"info\");\r\n      \r\n  gsap.set([temp,container,info.children,month],{autoAlpha:0});\r\n  gsap.set(temp,{transformOrigin:'50% 50%'})\r\n  gsap.set(month,{transformOrigin:'50% 100%'})\r\n  const tl = gsap.timeline({defaults:{ease:\"power3.inOut\"}});\r\n\r\n  tl.fromTo(month,{x:\"30px\",scaleX:0.7},{duration:.5, x:\"0\",scaleX:1,autoAlpha:1})\r\n  tl.fromTo(container,{x:\"-300px\"},{duration:.5, x:\"0\",autoAlpha:1})\r\n  tl.fromTo(temp,{scaleX:0.7},{duration:.2,scaleX:1,autoAlpha:1})\r\n  tl.fromTo(info.children,{y:-30 },{duration:.2,y:0,autoAlpha:1,stagger:.2})\r\n}\r\nconst Weather=(props)=> {\r\n\r\n  useEffect(()=>{\r\n    \r\n  showComponents(props.wrapper)\r\n \r\n  \r\n     \r\n  },[])\r\n\r\n\r\nreturn (\r\n      <>\r\n       \r\n       \r\n        {ShowWeatherContent(props.data)}\r\n        \r\n     </>\r\n    );\r\n  }\r\n  \r\n  export default Weather;\r\n\r\n ","import React,{useState,useEffect,useRef} from 'react';\nimport Weather from \"./components/Weather\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\";\nimport {handleClick} from \"./components/Weather\";\nimport Fetcher from \"./components/Fetcher\";\nimport {showComponents} from \"./components/Weather\"\n\n\nconst App=()=> {\n  const wrapper = useRef(null)\n\n  const [data,setData] = useState(\"\")\n  const [error,setError] = useState(false)\n  const [city,setCity] = useState(\"\")\n  const [country,setCountry] = useState(\"\")\n\n  useEffect(() => {\n      const APIKEY =\"3685edcdeb2b60f9ec66ee97605d3489\"\n  \n    const url = `https://api.openweathermap.org/data/2.5/weather?q=Warsaw,pl&APPID=${APIKEY}`\n    async function getData(){\n      const data = await Fetcher(url,setError)\n      setData(data.data)\n    }\n    getData()\n      \n  }, []);\n\n  \n\n  return (\n    <React.Fragment>\n        <div className=\"App\">\n        <div className=\"App__settings\">\n        <h4 className=\"App__settings-title\">Weather App</h4>\n        <div className=\"App__options\">\n         \n          <input type=\"text\" name=\"city\" className={error?\"App__options-data App__options-data--error\":\"App__options-data\"} \n          placeholder=\"Type your City\" \n          value={city}\n          onChange={(e)=>setCity(e.target.value)}\n          />\n         \n            <input type=\"text\" name=\"country\" className={error?\"App__options-data App__options-data--error\":\"App__options-data\"}\n          placeholder=\"Type your Country\" \n          value={country}\n          onChange={(e)=>setCountry(e.target.value)}\n          />\n           <p className={!error?\"App__options-data_text\":\"App__options-data_text App__options-data_text--error\"}>wrong city or country </p>\n        <button onClick={()=>{\n          handleClick(setData,city,country,setError,setCity,setCountry)\n            showComponents(wrapper)\n          }} className={error?\"App__options-btn App__options-btn--error\":\"App__options-btn\" }>Search</button>\n        </div>\n        </div>\n        <div className=\"weather-content\" ref={wrapper}>\n        <Weather data={data} wrapper={wrapper} />\n        </div>\n          <div className=\"App__back\"></div>\n    </div>\n \n    </React.Fragment>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./sass/style.scss\"\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}