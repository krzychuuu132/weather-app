{"version":3,"sources":["components/Fetcher.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Fetcher","url","a","Axios","get","response","loadData","handleClick","setData","city","data","Weather","props","className","App","useState","setCity","Fragment","type","name","placeholder","value","onChange","e","target","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qQAEe,SAASA,EAAQC,GAgB5B,OAZU,uCAAG,4BAAAC,EAAA,sEACcC,IAAMC,IAAIH,GADxB,cACHI,EADG,yBAICA,GAJD,2CAAH,oDAQGC,GCXV,IAAMC,EAAW,uCAAG,WAAMC,EAAQC,GAAd,iBAAAP,EAAA,4DAET,mCAERD,EAJiB,2DAIyCQ,EAJzC,qBAET,oCAFS,SAMJT,EAAQC,GANJ,OAMjBS,EANiB,OASvBF,EAAQE,EAAKA,MATU,2CAAH,wDA2EPC,EArBH,SAACC,GAWX,OACE,oCAEE,yBAAKC,UAAU,oBACKD,EAAMF,KA7C9B,oCACA,wBAAIG,UAAU,yBAAd,YACA,wBAAIA,UAAU,0BAAd,UACA,yBAAKA,UAAU,4BACb,yBAAKA,UAAU,iCACd,uBAAGA,UAAU,sCAAb,WACA,0BAAMA,UAAU,sCAAhB,qBAED,yBAAKA,UAAU,iCACb,yBAAKA,UAAU,yCACb,uBAAGA,UAAU,uCAAsC,0BAAMA,UAAU,sDAAnE,QACA,0BAAMA,UAAU,uCAAhB,QAEF,yBAAKA,UAAU,yCACf,uBAAGA,UAAU,uCAAsC,0BAAMA,UAAU,sDAAnE,QACE,0BAAMA,UAAU,uCAAhB,QAEF,yBAAKA,UAAU,yCACf,uBAAGA,UAAU,uCAAsC,0BAAMA,UAAU,mDAAnE,QACE,0BAAMA,UAAU,uCAAhB,QAEF,yBAAKA,UAAU,yCACf,uBAAGA,UAAU,uCAAsC,0BAAMA,UAAU,uDAAnE,QACE,0BAAMA,UAAU,uCAAhB,eCfKC,G,YA5BL,WAAM,IAAD,EAEUC,mBAAS,MAFnB,mBAENL,EAFM,KAEDF,EAFC,OAGUO,mBAAS,IAHnB,mBAGNN,EAHM,KAGDO,EAHC,KAKb,OACE,kBAAC,IAAMC,SAAP,KACI,yBAAKJ,UAAU,OACf,yBAAKA,UAAU,iBACf,wBAAIA,UAAU,uBAAd,WACA,yBAAKA,UAAU,gBACb,2BAAOK,KAAK,OAAOC,KAAK,UAAUN,UAAU,oBAC5CO,YAAY,iBACZC,MAAOZ,EACPa,SAAU,SAACC,GAAD,OAAKP,EAAQO,EAAEC,OAAOH,UAElC,4BAAQI,QAAS,kBAAIlB,EAAYC,EAAQC,IAAOI,UAAU,oBAA1D,YAGA,kBAAC,EAAD,CAASH,KAAMA,IAEb,yBAAKG,UAAU,kBChBLa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1e96115e.chunk.js","sourcesContent":["import Axios from 'axios'\r\n\r\nexport default function Fetcher(url){\r\n    \r\n\r\n    \r\nconst loadData = async ()=>{\r\n        const response = await Axios.get(url)\r\n               \r\n       \r\n           return response\r\n        \r\n    }\r\n\r\n   const data =  loadData();\r\n\r\n   \r\n  \r\n    return data\r\n\r\n    \r\n}","import React,{useState} from 'react';\r\nimport Fetcher from \"./Fetcher\"\r\n\r\nexport const handleClick = async(setData,city) =>{\r\n  \r\n    const APIKEY =\"3685edcdeb2b60f9ec66ee97605d3489\"\r\n\r\n    const url = `http://api.openweathermap.org/data/2.5/weather?q=${city},uk&APPID=${APIKEY}`\r\n    //https://samples.openweathermap.org/data/2.5/forecast/daily?q=M%C3%BCnchen,DE&appid=3685edcdeb2b60f9ec66ee97605d3489\r\n    const data = await Fetcher(url)\r\n    //87342d5fe25c36f18893da03fd123f18\r\n  \r\n    setData(data.data)\r\n}\r\n\r\nconst showTemperature=(min,max) =>{\r\n  return(\r\n    <>\r\n        <h3>{min} &deg;</h3>\r\n        <h3>{max} &deg;</h3>\r\n    </>\r\n  )\r\n}\r\n\r\nconst ShowWeatherContent = (data)=>{\r\n  \r\n  return(\r\n    <>\r\n    <h5 className=\"weather-content__date\">March 12</h5>\r\n    <h1 className=\"weather-content__month\">Warsaw</h1>\r\n    <div className=\"weather-content__details\">\r\n      <div className=\"weather-content__details-main\">\r\n       <p className=\"weather-content__details-main_temp\"> 4 &deg;</p>\r\n       <span className=\"weather-content__details-main-feel\">feels like 7&deg;</span>\r\n        </div>\r\n      <div className=\"weather-content__details-info\">\r\n        <div className=\"weather-content__details-info_element\">\r\n          <p className=\"weather-content__details-info_state\"><span className=\"wi wi-day-rain weather-content__details-info_icon\"></span>Rain</p>\r\n          <span className=\"weather-content__details-info_value\">40%</span>\r\n        </div>\r\n        <div className=\"weather-content__details-info_element\">\r\n        <p className=\"weather-content__details-info_state\"><span className=\"wi wi-raindrop weather-content__details-info_icon\"></span>Rain</p>\r\n          <span className=\"weather-content__details-info_value\">40%</span>\r\n        </div>\r\n        <div className=\"weather-content__details-info_element\">\r\n        <p className=\"weather-content__details-info_state\"><span className=\"wi wi-windy weather-content__details-info_icon\"></span>Rain</p>\r\n          <span className=\"weather-content__details-info_value\">40%</span>\r\n        </div>\r\n        <div className=\"weather-content__details-info_element\">\r\n        <p className=\"weather-content__details-info_state\"><span className=\"wi wi-day-sunny weather-content__details-info_icon\"></span>Rain</p>\r\n          <span className=\"weather-content__details-info_value\">40%</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\nconst Weather=(props)=> {\r\n\r\n\r\n    \r\n\r\n\r\n\r\n\r\n\r\n\r\n   \r\n    return (\r\n      <>\r\n       \r\n        <div className=\"weather-content\">\r\n        {ShowWeatherContent(props.data)}\r\n        </div>\r\n     </>\r\n    );\r\n  }\r\n  \r\n  export default Weather;\r\n\r\n ","import React,{useState} from 'react';\nimport Weather from \"./components/Weather\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\";\nimport {handleClick} from \"./components/Weather\"\n\n//http://api.openweathermap.org/data/2.5/weather?q=Strzelin&appid=87342d5fe25c36f18893da03fd123f18\nconst App=()=> {\n  \n  const [data,setData] = useState(null)\n  const [city,setCity] = useState(\"\")\n \n  return (\n    <React.Fragment>\n        <div className=\"App\">\n        <div className=\"App__settings\">\n        <h4 className=\"App__settings-title\">Weather</h4>\n        <div className=\"App__options\">\n          <input type=\"text\" name=\"weather\" className=\"App__options-data\" \n          placeholder=\"Type your City\" \n          value={city}\n          onChange={(e)=>setCity(e.target.value)}\n          />\n        <button onClick={()=>handleClick(setData,city)} className=\"App__options-btn\">Search</button>\n        </div>\n        </div>\n        <Weather data={data}/>\n    \n          <div className=\"App__back\"></div>\n    </div>\n \n    </React.Fragment>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"./sass/style.scss\"\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}